#!/usr/bin/env python3

import time
import random
import sys

def dramatic_print(text, delay=0.03):
    for char in text:
        print(char, end='', flush=True)
        time.sleep(delay)
    print()

def separator():
    print("\n" + "-" * 50 + "\n")

def get_input(prompt):
    return input(f"{prompt}: ").strip()

def print_rejected_stamp():
    try:
        import pyfiglet
        ascii_art = pyfiglet.figlet_format("Overqualification\nDetector 9000")
        print(ascii_art)
    except ImportError:
        print("The 'pyfiglet' module is not installed. Please install it using 'pip install pyfiglet'.")
        print(r"""
███████╗██╗  ██╗ █████╗ ███╗   ███╗███████╗     ██████╗ ███╗   ██╗    ██╗   ██╗ ██████╗ ██╗   ██╗
██╔════╝██║  ██║██╔══██╗████╗ ████║██╔════╝    ██╔═══██╗████╗  ██║    ██║   ██║██╔═══██╗██║   ██║
███████╗███████║███████║██╔████╔██║█████╗      ██║   ██║██╔██╗ ██║    ██║   ██║██║   ██║██║   ██║
╚════██║██╔══██║██╔══██║██║╚██╔╝██║██╔══╝      ██║   ██║██║╚██╗██║    ╚██╗ ██╔╝██║   ██║██║   ██║
███████║██║  ██║██║  ██║██║ ╚═╝ ██║███████╗    ╚██████╔╝██║ ╚████║     ╚████╔╝ ╚██████╔╝╚██████╔╝
╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝     ╚═════╝ ╚═╝  ╚═══╝      ╚═══╝   ╚═════╝  ╚═════╝                           
""")

def export_report_txt():
    filename = "overqualification_report.txt"
    with open(filename, "w") as f:
        f.write("=== Overqualification Detector 9000 Report ===\n")
        f.write("Candidate Status: NOT OVERQUALIFIED\n")
        f.write("Conclusion: You simply haven’t unlocked your full potential yet.\n")
        f.write("Generated by Not Overqualified™ (totally real and very scientific).\n")
    print(f"[📄 Report exported as '{filename}']")

def animated_disqualification_report():
    scan_steps = [
        "[████                    ] 25% Initializing Modules...",
        "[████████                ] 50% Scanning Resume...",
        "[████████████            ] 75% Cross-checking Claims...",
        "[████████████████        ] 90% AI Calibration...",
        "[███████████████████████] 100% Analysis Complete.\n"
    ]
    
    for step in scan_steps:
        dramatic_print(step, delay=0.05)
        time.sleep(0.4)

    dramatic_print("╔═══════════════════════════════════════════════════════╗", 0.002)
    dramatic_print("║            OVERQUALIFICATION DETECTOR 9000            ║", 0.002)
    dramatic_print("╠═══════════════════════════════════════════════════════╣", 0.002)
    dramatic_print("║ Resume Analysis: ██████████████████████████████░░░░░  ║", 0.002)
    dramatic_print("║                                                       ║", 0.002)
    dramatic_print("║ ➤ EDUCATION LEVEL:           NOT SUFFICIENT ❌        ║", 0.002)
    dramatic_print("║ ➤ EXPERIENCE MATCH:          BELOW THRESHOLD ❌        ║", 0.002)
    dramatic_print("║ ➤ BUZZWORDS DETECTED:        INSUFFICIENT ⚠️           ║", 0.002)
    dramatic_print("║                                                       ║", 0.002)
    dramatic_print("║ ⛔ STATUS: NOT QUALIFIED                                ║", 0.002)
    dramatic_print("║                                                       ║", 0.002)
    dramatic_print("║ RECOMMENDATION:                                        ║", 0.002)
    dramatic_print("║ » Suggest basic training module: 'How Job Work 101'   ║", 0.002)
    dramatic_print("║ » Resume formatting advice: Remove Comic Sans         ║", 0.002)
    dramatic_print("╚═══════════════════════════════════════════════════════╝", 0.002)
    print("\n")
    time.sleep(1)

def main():
    print("\n🧠 Welcome to *OVERQUALIFICATION DETECTOR 9000™* - the definitive job-fit analyzer.\n")
    separator()

    print("Please provide the following details so we can ignore them:\n")

    data = {
        "Full Name": get_input("👤 Full Name"),
        "Skills": get_input("🛠 Skills (comma-separated)"),
        "Years of Experience": get_input("📆 Years of Experience"),
        "Certifications": get_input("📜 Certifications"),
        "Education": get_input("🎓 Education"),
        "LinkedIn Profile": get_input("🔗 LinkedIn Profile URL (if any)"),
    }

    separator()
    print("🔍 Analyzing your data with our patented 'Judgment Engine™'...\n")
    time.sleep(random.uniform(1.5, 3.0))

    for char in "...thinking...":
        print(char, end='', flush=True)
        time.sleep(0.15)
    print("\n")

    animated_disqualification_report()

    dramatic_print(random.choice([
        "❌ You are absolutely not qualified.",
        "📉 Analysis shows: Definitely underqualified.",
        "🤔 Resume status: Strong 'no'.",
        "🧃 Not even close to overqualified. Juice box?"
    ]))

    print_rejected_stamp()
    export_report_txt()

    separator()
    print("Thank you for using *OVERQUALIFICATION DETECTOR 9000™*. We hope it was as pointless for you as it was for us.\n")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n🚪 Exiting with dignity.")
        sys.exit(0)
